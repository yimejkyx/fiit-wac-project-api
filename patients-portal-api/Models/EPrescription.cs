/*
 * Patients Portal
 *
 * Best Medical Portal API ever
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nikolas.tsk@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace eu.fiit.PatientsPortal.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EPrescription : IEquatable<EPrescription>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Medicines
        /// </summary>
        [DataMember(Name = "medicines")]
        public List<Medicine> Medicines { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Expiration
        /// </summary>
        [DataMember(Name = "expiration")]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Patient
        /// </summary>
        [DataMember(Name = "patient")]
        public User Patient { get; set; }

        /// <summary>
        /// Gets or Sets Doctor
        /// </summary>
        [DataMember(Name = "doctor")]
        public User Doctor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EPrescription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Medicines: ").Append(Medicines).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Patient: ").Append(Patient).Append("\n");
            sb.Append("  Doctor: ").Append(Doctor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EPrescription)obj);
        }

        /// <summary>
        /// Returns true if EPrescription instances are equal
        /// </summary>
        /// <param name="other">Instance of EPrescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EPrescription other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) &&
                (
                    Medicines == other.Medicines ||
                    Medicines != null &&
                    Medicines.SequenceEqual(other.Medicines)
                ) &&
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) &&
                (
                    Expiration == other.Expiration ||
                    Expiration != null &&
                    Expiration.Equals(other.Expiration)
                ) &&
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                )&&
                (
                    Patient == other.Patient ||
                    Patient != null &&
                    Patient.Equals(other.Patient)
                ) &&
                (
                    Doctor == other.Doctor ||
                    Doctor != null &&
                    Doctor.Equals(other.Doctor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                if (Medicines != null)
                    hashCode = hashCode * 59 + Medicines.GetHashCode();
                if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                if (Expiration != null)
                    hashCode = hashCode * 59 + Expiration.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                if (Patient != null)
                    hashCode = hashCode * 59 + Patient.GetHashCode();
                if (Doctor != null)
                    hashCode = hashCode * 59 + Doctor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EPrescription left, EPrescription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EPrescription left, EPrescription right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
