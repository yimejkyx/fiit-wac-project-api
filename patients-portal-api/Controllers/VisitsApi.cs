/*
 * Patients Portal
 *
 * Best Medical Portal API ever
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nikolas.tsk@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using eu.fiit.PatientsPortal.Attributes;

using Microsoft.AspNetCore.Authorization;
using eu.fiit.PatientsPortal.Models;
using eu.fiit.PatientsPortal.Services;

namespace eu.fiit.PatientsPortal.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VisitsApiController : ControllerBase
    {
        private readonly IDataRepository repository;

        /// <summary/>
        public VisitsApiController(IDataRepository repository)
            => this.repository = repository;

        /// <summary>
        /// Add a new Visit
        /// </summary>
        /// <param name="body">Visit object</param>
        /// <response code="400">Invalid length supplied</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/api/visits")]
        [ValidateModelState]
        [SwaggerOperation("AddVisit")]
        public virtual IActionResult AddVisit([FromBody] Visit body)
        {
            if (body.Length<=0) return StatusCode(400, "Length of visit must be greater than 0 minutes");
            var parsed = this.repository.UpsertVisitData(body);
            return StatusCode(200, parsed);
        }

        /// <summary>
        /// Deletes a Visit
        /// </summary>
        /// <param name="visitId">Visit id to delete</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpDelete]
        [Route("/api/visits/{visitId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteVisit")]
        public virtual IActionResult DeleteVisit([FromRoute][Required] int visitId)
        {
            var visit = this.repository.GetVisitData(visitId);
            if (visit == null) { return new NotFoundResult(); }
            this.repository.DeleteVisit(visitId);
            return new OkResult();
        }

        /// <summary>
        /// Get all visits
        /// </summary>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/api/visits")]
        [ValidateModelState]
        [SwaggerOperation("GetVisits")]
        [SwaggerResponse(statusCode: 200, type: typeof(IEnumerable<Visit>), description: "successful operation")]
        public virtual IActionResult GetVisits()
        {
            IEnumerable<Visit> visits = this.repository.GetVisitsData();
            return StatusCode(200, visits);
        }

        /// <summary>
        /// Update an existing Visit
        /// </summary>
        /// <param name="visitId">Visit id to update</param>
        /// <param name="body">Visit object</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Visit not found</response>
        [HttpPut]
        [Route("/api/visits/{visitId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVisit")]
        public virtual IActionResult UpdateVisit([FromRoute][Required] int visitId, [FromBody] Visit body)
        {
            if (!visitId.Equals(body.Id)) { return new BadRequestResult(); }
            var exists = this.repository.GetVisitData(visitId);
            if (exists == null) { return new NotFoundResult(); }
            var parsed = this.repository.UpsertVisitData(body);
            return StatusCode(200, parsed);
        }
    }
}
